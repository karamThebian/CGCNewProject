# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Appointment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, patient_name=None, issue=None, doctor=None, clinic=None, date=None):  # noqa: E501
        """Appointment - a model defined in OpenAPI

        :param id: The id of this Appointment.  # noqa: E501
        :type id: int
        :param patient_name: The patient_name of this Appointment.  # noqa: E501
        :type patient_name: str
        :param issue: The issue of this Appointment.  # noqa: E501
        :type issue: str
        :param doctor: The doctor of this Appointment.  # noqa: E501
        :type doctor: str
        :param clinic: The clinic of this Appointment.  # noqa: E501
        :type clinic: str
        :param date: The date of this Appointment.  # noqa: E501
        :type date: datetime
        """
        self.openapi_types = {
            'id': int,
            'patient_name': str,
            'issue': str,
            'doctor': str,
            'clinic': str,
            'date': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'patient_name': 'patientName',
            'issue': 'issue',
            'doctor': 'doctor',
            'clinic': 'clinic',
            'date': 'date'
        }

        self._id = id
        self._patient_name = patient_name
        self._issue = issue
        self._doctor = doctor
        self._clinic = clinic
        self._date = date

    @classmethod
    def from_dict(cls, dikt) -> 'Appointment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Appointment of this Appointment.  # noqa: E501
        :rtype: Appointment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Appointment.


        :return: The id of this Appointment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Appointment.


        :param id: The id of this Appointment.
        :type id: int
        """

        self._id = id

    @property
    def patient_name(self):
        """Gets the patient_name of this Appointment.


        :return: The patient_name of this Appointment.
        :rtype: str
        """
        return self._patient_name

    @patient_name.setter
    def patient_name(self, patient_name):
        """Sets the patient_name of this Appointment.


        :param patient_name: The patient_name of this Appointment.
        :type patient_name: str
        """

        self._patient_name = patient_name

    @property
    def issue(self):
        """Gets the issue of this Appointment.


        :return: The issue of this Appointment.
        :rtype: str
        """
        return self._issue

    @issue.setter
    def issue(self, issue):
        """Sets the issue of this Appointment.


        :param issue: The issue of this Appointment.
        :type issue: str
        """

        self._issue = issue

    @property
    def doctor(self):
        """Gets the doctor of this Appointment.


        :return: The doctor of this Appointment.
        :rtype: str
        """
        return self._doctor

    @doctor.setter
    def doctor(self, doctor):
        """Sets the doctor of this Appointment.


        :param doctor: The doctor of this Appointment.
        :type doctor: str
        """

        self._doctor = doctor

    @property
    def clinic(self):
        """Gets the clinic of this Appointment.


        :return: The clinic of this Appointment.
        :rtype: str
        """
        return self._clinic

    @clinic.setter
    def clinic(self, clinic):
        """Sets the clinic of this Appointment.


        :param clinic: The clinic of this Appointment.
        :type clinic: str
        """

        self._clinic = clinic

    @property
    def date(self):
        """Gets the date of this Appointment.


        :return: The date of this Appointment.
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this Appointment.


        :param date: The date of this Appointment.
        :type date: datetime
        """

        self._date = date
