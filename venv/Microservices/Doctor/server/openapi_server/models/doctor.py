# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model_ import Model
from openapi_server import util


class Doctor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None, speciality=None, username=None, password=None, address=None, phone_number=None, date_of_birth=None):  # noqa: E501
        """Doctor - a model defined in OpenAPI

        :param id: The id of this Doctor.  # noqa: E501
        :type id: int
        :param name: The name of this Doctor.  # noqa: E501
        :type name: str
        :param speciality: The speciality of this Doctor.  # noqa: E501
        :type speciality: str
        :param username: The username of this Doctor.  # noqa: E501
        :type username: str
        :param password: The password of this Doctor.  # noqa: E501
        :type password: str
        :param address: The address of this Doctor.  # noqa: E501
        :type address: str
        :param phone_number: The phone_number of this Doctor.  # noqa: E501
        :type phone_number: str
        :param date_of_birth: The date_of_birth of this Doctor.  # noqa: E501
        :type date_of_birth: date
        """
        self.openapi_types = {
            'id': int,
            'name': str,
            'speciality': str,
            'username': str,
            'password': str,
            'address': str,
            'phone_number': str,
            'date_of_birth': date
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'speciality': 'speciality',
            'username': 'username',
            'password': 'password',
            'address': 'address',
            'phone_number': 'phoneNumber',
            'date_of_birth': 'dateOfBirth'
        }

        self._id = id
        self._name = name
        self._speciality = speciality
        self._username = username
        self._password = password
        self._address = address
        self._phone_number = phone_number
        self._date_of_birth = date_of_birth

    @classmethod
    def from_dict(cls, dikt) -> 'Doctor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Doctor of this Doctor.  # noqa: E501
        :rtype: Doctor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Doctor.


        :return: The id of this Doctor.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Doctor.


        :param id: The id of this Doctor.
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Doctor.


        :return: The name of this Doctor.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Doctor.


        :param name: The name of this Doctor.
        :type name: str
        """

        self._name = name

    @property
    def speciality(self):
        """Gets the speciality of this Doctor.


        :return: The speciality of this Doctor.
        :rtype: str
        """
        return self._speciality

    @speciality.setter
    def speciality(self, speciality):
        """Sets the speciality of this Doctor.


        :param speciality: The speciality of this Doctor.
        :type speciality: str
        """

        self._speciality = speciality

    @property
    def username(self):
        """Gets the username of this Doctor.


        :return: The username of this Doctor.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Doctor.


        :param username: The username of this Doctor.
        :type username: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this Doctor.


        :return: The password of this Doctor.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Doctor.


        :param password: The password of this Doctor.
        :type password: str
        """

        self._password = password

    @property
    def address(self):
        """Gets the address of this Doctor.


        :return: The address of this Doctor.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Doctor.


        :param address: The address of this Doctor.
        :type address: str
        """

        self._address = address

    @property
    def phone_number(self):
        """Gets the phone_number of this Doctor.


        :return: The phone_number of this Doctor.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Doctor.


        :param phone_number: The phone_number of this Doctor.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def date_of_birth(self):
        """Gets the date_of_birth of this Doctor.


        :return: The date_of_birth of this Doctor.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """Sets the date_of_birth of this Doctor.


        :param date_of_birth: The date_of_birth of this Doctor.
        :type date_of_birth: date
        """

        self._date_of_birth = date_of_birth
